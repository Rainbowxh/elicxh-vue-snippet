{
  "ref": {
    "name": "ref",  
    "labelDesc": "vue ref Reactivity: Core",
    "insertText": "const ${1} = ref(${2});",
    "filterText": "ref",
    "detail": "Takes an inner value and returns a reactive and mutable ref object, which has a single property .value that points to the inner value."
  },
  "reactive": {
    "name": "reactive",    
    "labelDesc": "vue reactive Reactivity: Core",
    "insertText": "const ${1} = reactive({${2}});",
    "filterText": "reactive",
    "detail": "Returns a reactive proxy of the object."
  },
  "readonly": {
    "name": "readonly",
    "labelDesc": "vue readonly Reactivity: Core",
    "insertText": "const ${1} = readonly(${2});",
    "filterText": "readonly",
    "detail": "Takes an object (reactive or plain) or a ref and returns a readonly proxy to the original."
  },
  "computed": {
    "name": "computed",
    "labelDesc": "vue computed Reactivity: Core",
    "insertText": "const ${1} = computed(() => ''${2});",
    "filterText": "computed",
    "detail": "Takes a getter function and returns a readonly reactive ref object for the returned value from the getter. It can also take an object with get and set functions to create a writable ref object."
  },
  "watchEffect": {
    "name": "watchEffect",
    "insertText": "watchEffect(() => {${1}});",
    "labelDesc": "vue watchEffect Reactivity: Core",
    "detail": "Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.",
    "filterText": "watchEffect"
  },
  "watch": {
    "name": "watch", 
    "labelDesc": "vue watch Reactivity: Core",
    "insertText": "watch(() => ${1}, (value, oldValue) => {${2}});",
    "detail": "Watches one or more reactive data sources and invokes a callback function when the sources change.",
    "filterText": "watch"
  },
  "isRef": {
    "name": "isRef",
    "labelDesc": "vue isRef Reactivity: Utilities",
    "insertText": "isRef(${1});",
    "filterText": "isRef"
  },
  "unref": {
    "name": "unref",
    "labelDesc": "vue unref Reactivity: Utilities",
    "insertText": "unref(${1});",
    "filterText": "unref"
  },
  "toRef": {
    "name": "toRef",
    "labelDesc": "vue toRef Reactivity: Utilities",
    "insertText": "toRef(${1});",
    "filterText": "toRef"
  },  
  "toValue": {
    "name": "toValue",
    "labelDesc": "vue toValue Reactivity: Utilities",
    "labelDetail": "v3.3+",
    "insertText": "toValue(${1});",
    "filterText": "toValue"
  },
  "toRefs": {
    "name": "toRefs",
    "labelDesc": "vue toRefs Reactivity: Utilities",
    "insertText": "toRefs(${1});",
    "filterText": "toRefs"
  },
  "isProxy": {
    "name": "isProxy",
    "labelDesc": "vue isProxy Reactivity: Utilities",
    "insertText": "isProxy(${1});",
    "filterText": "isProxy"
  },
  "isReactive": {
    "name": "isReactive",
    "labelDesc": "vue isReactive Reactivity: Utilities",
    "insertText": "isReactive(${1});",
    "filterText": "isReactive"
  },  
  "isReadonly": {
    "name": "isReadonly",
    "labelDesc": "vue isReadonly Reactivity: Utilities",
    "insertText": "isReadonly(${1});",
    "filterText": "isReadonly"
  },
  "shallowRef": {
    "name": "shallowRef",
    "labelDesc": "vue shallowRef Reactivity: Advanced",
    "insertText": "shallowRef({${1}});",
    "detail": "Shallow version of ref().",
    "filterText": "shallowRef"
  },
  "triggerRef": {
    "name": "triggerRef",
    "labelDesc": "vue triggerRef Reactivity: Advanced",
    "insertText": "triggerRef({${1}});",
    "filterText": "triggerRef",
    "detail": "Force trigger effects that depends on a shallow ref. This is typically used after making deep mutations to the inner value of a shallow ref."
  },
  "customRef": {
    "name": "customRef",
    "labelDesc": "vue customRef Reactivity: Advanced",
    "insertText": "customRef((track, trigger) => {\n  return {\n    get() {\n      ${1}\n    },\n    set() {\n      ${2}\n    }\n  }\n})",
    "filterText": "customRef",
    "detail": "Creates a customized ref with explicit control over its dependency tracking and updates triggering."
  },
  "shallowReactive": {
    "name": "shallowReactive",
    "labelDesc": "vue shallowReactive Reactivity: Advanced",
    "insertText": "shallowReactive({${1}});",
    "filterText": "shallowReactive",
    "detail": "Shallow version of reactive()."
  },
  "shallowReadonly": {
    "name": "shallowReadonly",
    "labelDesc": "vue shallowReadonly Reactivity: Advanced",
    "insertText": "shallowReadonly({${1}});",
    "filterText": "shallowReadonly",
    "detail": "Shallow version of readonly()."
  },
  "toRaw": {
    "name": "toRaw",
    "labelDesc": "vue toRaw Reactivity: Advanced",
    "insertText": "toRaw(${1});",
    "filterText": "toRaw",
    "detail": "Returns the raw, original object of a Vue-created proxy."
  },
  "markRaw": {
    "name": "markRaw",
    "labelDesc": "vue markRaw Reactivity: Advanced",
    "insertText": "markRaw({${1}});",
    "filterText": "markRaw",
    "detail": "Marks an object so that it will never be converted to a proxy. Returns the object itself."
  },
  "effectScope": {
    "name": "effectScope",
    "labelDesc": "vue effectScope Reactivity: Advanced",
    "insertText": "const scope = effectScope();\nscope.run(() => ${1});\nscope.stop();",
    "filterText": "effectScope",
    "detail": "Creates an effect scope object which can capture the reactive effects (i.e. computed and watchers) created within it so that these effects can be disposed together. For detailed use cases of this API, please consult its corresponding RFC."
  },
  "getCurrentScope": {
    "name": "getCurrentScope",
    "labelDesc": "vue getCurrentScope Reactivity: Advanced",
    "insertText": "const currentScope = getCurrentScope();",
    "filterText": "getCurrentScope",
    "detail": "Returns the current active effect scope if there is one."
  },
  "onScopeDispose": {
    "name": "onScopeDispose",
    "labelDesc": "vue onScopeDispose Reactivity: Advanced",
    "insertText": "onScopeDispose(() => {${1}});",
    "filterText": "onScopeDispose",
    "detail": "Registers a dispose callback on the current active effect scope. The callback will be invoked when the associated effect scope is stopped.\n\nThis method can be used as a non-component-coupled replacement of onUnmounted in reusable composition functions, since each Vue component's setup() function is also invoked in an effect scope."
  },
  "onMounted": {
    "name": "onMounted",
    "labelDesc": "vue onMounted Lifecycle Hooks",
    "insertText": "onMounted(() => {${1}});",
    "filterText": "onMounted",
    "detail": "Registers a callback to be called after the component has been mounted."
  },
  "onUpdated": {
    "name": "onUpdated",
    "labelDesc": "vue onUpdated Lifecycle Hooks",
    "insertText": "onUpdated(() => {${1}});",
    "filterText": "onUpdated",
    "detail": "Registers a callback to be called after the component has updated its DOM tree due to a reactive state change."
  },
  "onUnmounted": {
    "name": "onUnmounted",
    "labelDesc": "vue onUnmounted Lifecycle Hooks",
    "insertText": "onUnmounted(() => {${1}});",
    "filterText": "onUnmounted",
    "detail": "Registers a callback to be called after the component has been unmounted."
  },
  "onBeforeMount": {
    "name": "onBeforeMount",
    "labelDesc": "vue onBeforeMount Lifecycle Hooks",
    "insertText": "onBeforeMount(() => {${1}});",
    "filterText": "onBeforeMount",
    "detail": "Registers a hook to be called right before the component is to be mounted."
  },
  "onBeforeUpdate": {
    "name": "onBeforeUpdate",
    "labelDesc": "vue onBeforeUpdate Lifecycle Hooks",
    "insertText": "onBeforeUpdate(() => {${1}});",
    "filterText": "onBeforeUpdate",
    "detail": "Registers a hook to be called right before the component is about to update its DOM tree due to a reactive state change."
  },
  "onBeforeUnmount": {
    "name": "onBeforeUnmount",
    "labelDesc": "vue onBeforeUnmount Lifecycle Hooks",
    "insertText": "onBeforeUnmount(() => {${1}});",
    "filterText": "onBeforeUnmount",
    "detail": "Registers a hook to be called right before a component instance is to be unmounted."
  },
  "onErrorCaptured": {
    "name": "onErrorCaptured",
    "labelDesc": "vue onErrorCaptured Lifecycle Hooks",
    "insertText": "onErrorCaptured((err, instance, info) => {${1}});",
    "filterText": "onErrorCaptured",
    "detail": "Registers a hook to be called when an error propagating from a descendant component has been captured."
  },
  "onRenderTracked": {
    "name": "onRenderTracked",
    "labelDesc": "vue onRenderTracked Lifecycle Hooks",
    "labelDetail": "Dev only!!",
    "insertText": "onRenderTracked((e) => {\n  const { effect, target, type, key } = e;\n  ${1}\n});",
    "filterText": "onRenderTracked",
    "detail": "Registers a debug hook to be called when a reactive dependency has been tracked by the component's render effect.\n\nThis hook is development-mode-only and not called during server-side rendering."
  },
  "onRenderTriggered": {
    "name": "onRenderTriggered",
    "labelDesc": "vue onRenderTriggered Lifecycle Hooks",
    "labelDetail": "Dev only!!",
    "insertText": "onRenderTriggered((e) => {\n  const { effect, target, type, key, newValue, oldValue, oldTarget } = e;\n  ${1}\n});",
    "filterText": "onRenderTriggered",
    "detail": "Registers a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run.\n\nThis hook is development-mode-only and not called during server-side rendering."
  },
  "onActivated": {
    "name": "onActivated",
    "labelDesc": "vue onActivated Lifecycle Hooks",
    "labelDetail": "<keep-alive>",
    "insertText": "onActivated(() => {${1}});",
    "filterText": "onActivated",
    "detail": "Registers a callback to be called after the component instance is inserted into the DOM as part of a tree cached by <KeepAlive>.\n\nThis hook is not called during server-side rendering."
  },
  "onDeactivated": {
    "name": "onDeactivated",
    "labelDesc": "vue onDeactivated Lifecycle Hooks",
    "labelDetail": "<keep-alive>",
    "insertText": "onDeactivated(() => {${1}});",
    "filterText": "onDeactivated",
    "detail": "Registers a callback to be called after the component instance is removed from the DOM as part of a tree cached by <KeepAlive>.\n\nThis hook is not called during server-side rendering."
  },
  "onServerPrefetch": {
    "name": "onServerPrefetch",
    "labelDesc": "vue onServerPrefetch Lifecycle Hooks",
    "labelDetail": "<keep-alive>",
    "insertText": "onServerPrefetch(async () => {${1}});",
    "filterText": "onServerPrefetch",
    "detail": "Registers an async function to be resolved before the component instance is to be rendered on the server."
  },
  "provide": {
    "name": "provide",
    "labelDesc": "vue provide Dependency Injection",
    "insertText": "provide(${1});",
    "filterText": "provide",
    "detail": "Provides a value that can be injected by descendant components."
  },
  "inject": {
    "name": "inject",
    "labelDesc": "vue inject Dependency Injection",
    "insertText": "inject(${1});",
    "filterText": "inject",
    "detail": "Injects a value provided by an ancestor component or the application (via app.provide())."
  },
  "hasInjectionContext": {
    "name": "hasInjectionContext",
    "labelDesc": "vue hasInjectionContext Dependency Injection",
    "labelDetail": "v3.3+",
    "insertText": "const ${1} = hasInjectionContext();",
    "filterText": "hasInjectionContext",
    "detail": "Returns true if inject() can be used without warning about being called in the wrong place (e.g. outside of setup()). This method is designed to be used by libraries that want to use inject() internally without triggering a warning to the end user."
  },
  "h": {
    "name": "h",
    "labelDesc": "vue h Render Function",
    "insertText": "h(${1},${2},${3});",
    "filterText": "h",
    "detail": "Creates virtual DOM nodes (vnodes)."
  },
  "hdiv": {
    "name": "h",
    "label": "hdiv",
    "labelDesc": "vue h custom function",
    "insertText": "h('div',{${2}},${3});",
    "filterText": "hdiv",
    "detail": "Creates virtual Div DOM nodes (vnodes)."
  },
  "hspan": {
    "name": "h",
    "label": "hspan",
    "labelDesc": "vue h custom function",
    "insertText": "h('span',{${2}},${3});",
    "filterText": "hspan",
    "detail": "Creates virtual Span DOM nodes (vnodes)."
  },
  "mergeProps": {
    "name": "mergeProps",
    "labelDesc": "vue mergeProps Render Function",
    "insertText": "mergeProps(${1},${2});",
    "filterText": "mergeProps",
    "detail": "Merge multiple props objects with special handling for certain props."
  },
  "cloneVNode": {
    "name": "cloneVNode",
    "labelDesc": "vue cloneVNode Render Function",
    "insertText": "const cloned = cloneVNode(${1});",
    "filterText": "cloneVNode",
    "detail": "Clones a vnode."
  },
  "isVNode": {
    "name": "isVNode",
    "labelDesc": "vue isVNode Render Function",
    "insertText": "const ${1} = isVNode(${2});",
    "filterText": "isVNode",
    "detail": "Checks if a value is a vnode."
  },
  "resolveComponent": {
    "name": "resolveComponent",
    "labelDesc": "vue resolveComponent Render Function",
    "insertText": "const ${1} = resolveComponent('${2}');",
    "filterText": "resolveComponent",
    "detail": "For manually resolving a registered component by name."
  },
  "resolveDirective": {
    "name": "resolveDirective",
    "labelDesc": "vue resolveDirective Render Function",
    "insertText": "const ${1} = resolveDirective('${2}');",
    "filterText": "resolveDirective",
    "detail": "For manually resolving a registered directive by name."
  },
  "withDirectives": {
    "name": "withDirectives",
    "labelDesc": "vue withDirectives Render Function",
    "insertText": "const ${1} = withDirectives(${2},${3});",
    "filterText": "withDirectives",
    "detail": "For adding custom directives to vnodes."
  },
  "withModifiers": {
    "name": "withModifiers",
    "labelDesc": "vue withModifiers Render Function",
    "labelDetail": "v-on:click.stop.prevent",
    "insertText": "withModifiers(() => {${2}},[${3}]);",
    "filterText": "withModifiers",
    "detail": "For adding built-in v-on modifiers to an event handler function."
  },
  "loading": {
    "name": "loading",
    "labelDesc": "vue custom loading example",
    "labelDetail": "loading example",
    "insertText": "const loading${1} = ref(false);",
    "filterText": "loading",
    "detail": "Fast loading for ref;"
  }
}
